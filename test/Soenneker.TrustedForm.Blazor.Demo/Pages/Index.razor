@page "/"
@using System.ComponentModel.DataAnnotations
@using Soenneker.TrustedForm.Blazor
@using Soenneker.TrustedForm.Blazor.Options
@using Microsoft.AspNetCore.Components.Forms

<div class="header" >
    <div class="header-content" >
        <div class="logo" >🔒</div>
        <h1>TrustedForm Blazor Demo</h1>
        <p>Experience the power of ActiveProspect's TrustedForm integration with our modern Blazor component library. Secure, reliable, and beautifully designed.</p>
    </div>
</div>

<div class="content" >
    <!-- Status Overview -->
    <div class="section fade-in" >
        <h2 class="section-title" >System Status</h2>
        <div class="status-grid" >
            <div class="status-card @(_trustedFormLoaded ? "active" : "inactive")" >
                <div class="status-icon" >@(_trustedFormLoaded ? "✅" : "⏳")</div>
                <div class="status-label" >TrustedForm Status</div>
                <div class="status-value" >@(_trustedFormLoaded ? "Ready" : "Loading...")</div>
            </div>
            <div class="status-card @(_trustedFormRef?.IsRecording() == true ? "active" : "inactive")" >
                <div class="status-icon" >@(_trustedFormRef?.IsRecording() == true ? "🔴" : "⏸️")</div>
                <div class="status-label" >Recording State</div>
                <div class="status-value" >@(_trustedFormRef?.IsRecording() == true ? "Active" : "Inactive")</div>
            </div>
            <div class="status-card @(_certUrl != null ? "active" : "inactive")" >
                <div class="status-icon" >@(_certUrl != null ? "📋" : "📄")</div>
                <div class="status-label" >Cert URL</div>
                <div class="status-value" >@(_certUrl != null ? "Available" : "Not Generated")</div>
            </div>
        </div>
    </div>

    <!-- Contact Form with TrustedForm Wrapper -->
    <div class="section fade-in" >
        <h2 class="section-title" >Contact Form with TrustedForm Wrapper</h2>
        <p style="color: var(--text-secondary); margin-bottom: 2rem;" >This demonstrates the wrapper pattern where TrustedForm encapsulates your form fields.</p>

        <TrustedForm @ref="_trustedFormRef" OnLoad="OnTrustedFormLoaded" Configuration="_trustedFormConfig" >
            <EditForm Model="_formModel" OnValidSubmit="HandleValidSubmit" >
                <div class="form-group" >
                    <label for="name" class="form-label" >Full Name</label>
                    <InputText id="name" class="form-control" @bind-Value="_formModel.Name" placeholder="Enter your full name" />
                    <ValidationMessage For="@(() => _formModel.Name)" />
                </div>

                <div class="form-group" >
                    <label for="email" class="form-label" >Email Address</label>
                    <InputText id="email" class="form-control" @bind-Value="_formModel.Email" placeholder="Enter your email address" />
                    <ValidationMessage For="@(() => _formModel.Email)" />
                </div>

                <button type="submit" class="btn btn-success" >
                    <span>📤</span>
                    Submit Form
                </button>
            </EditForm>
        </TrustedForm>

        @if (_formSubmitted)
        {
            <div class="alert alert-success slide-in" >
                <div class="alert-title" >✅ Form Submitted Successfully!</div>
                <div>
                    <strong>Name:</strong> @_formModel.Name
                </div>
                <div>
                    <strong>Email:</strong> @_formModel.Email
                </div>
            </div>
        }
    </div>

    <div class="section fade-in" >
        <h2 class="section-title" >TrustedForm Controls</h2>
        <p style="color: var(--text-secondary); margin-bottom: 2rem;" >Manage TrustedForm recording and retrieve certification URLs with these powerful controls.</p>

        <div class="btn-group" >
            <button @onclick="GetCertUrl" class="btn btn-primary" disabled="@(!_trustedFormLoaded)" >
                <span>🔗</span>
                Get Cert URL
            </button>
            <button @onclick="StartIfNotRunning" class="btn btn-success" disabled="@(!_trustedFormLoaded)" >
                <span>▶️</span>
                Start Recording
            </button>
            <button @onclick="StopTrustedForm" class="btn btn-danger" disabled="@(!_trustedFormLoaded)" >
                <span>⏹️</span>
                Stop Recording
            </button>
            <button @onclick="FinalizeTrustedForm" class="btn btn-warning" disabled="@(!_trustedFormLoaded)" >
                <span>🔒</span>
                Finalize
            </button>
        </div>

        @if (_certUrl != null)
        {
            <div >
                <div class="alert-title" >🔗 TrustedForm Certification URL</div>
                <div class="selectable-code" style="margin-top: 1rem; word-break: break-all; font-size: 0.75rem; background: rgba(0,0,0,0.1); padding: 0.5rem; border-radius: 4px; font-family: monospace;" >
                    @_certUrl
                </div>
            </div>
        }

        @if (_trustedFormStopped)
        {
            <div class="alert alert-warning slide-in" >
                <div class="alert-title" >⏸️ Recording Stopped</div>
                TrustedForm recording has been successfully stopped. You can restart it using the "Start Recording" button.
            </div>
        }

        @if (_trustedFormFinalized)
        {
            <div class="alert alert-info slide-in" >
                <div class="alert-title" >🔒 Certificate Finalized</div>
                TrustedForm certificate has been finalized for 90-day retention.
            </div>
        }
    </div>
</div>

<style>
    .info-box {
        background: var(--surface-secondary);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 1rem;
        margin-top: 1rem;
        font-size: 0.9rem;
        color: var(--text-secondary);
    }
    
    .info-box ul {
        margin: 0.5rem 0 0 0;
        padding-left: 1.5rem;
    }
    
    .info-box li {
        margin-bottom: 0.25rem;
    }

    .selectable-code {
        user-select: text !important;
        -webkit-user-select: text !important;
        -moz-user-select: text !important;
        -ms-user-select: text !important;
        cursor: text !important;
        white-space: pre-wrap;
        word-break: break-all;
    }
</style>

@code {
    private TrustedForm? _trustedFormRef;

    private readonly TrustedFormConfiguration _trustedFormConfig = new()
    {
        Debug = true,
        IncludeForm = false,
        Sandbox = true
    };

    private string? _certUrl;
    private bool _trustedFormLoaded;
    private bool _trustedFormStopped;
    private bool _trustedFormFinalized;

    private readonly DemoFormModel _formModel = new();
    private bool _formSubmitted;

    private async Task StopTrustedForm()
    {
        if (_trustedFormRef is not null)
        {
            await _trustedFormRef.Stop();
            _trustedFormStopped = true;
            StateHasChanged();
        }
    }

    private async Task StartIfNotRunning()
    {
        if (_trustedFormRef is not null)
        {
            await _trustedFormRef.StartIfNotRunning();
            _trustedFormStopped = false;
            StateHasChanged();
        }
    }

    private void OnTrustedFormLoaded()
    {
        _trustedFormLoaded = true;
        _certUrl = null;
        _trustedFormStopped = false;
        _trustedFormFinalized = false;
        StateHasChanged();
    }

    private async Task GetCertUrl()
    {
        if (_trustedFormRef is not null)
        {
            _certUrl = await _trustedFormRef.GetCertUrl();
            StateHasChanged();
        }
    }

    private async Task FinalizeTrustedForm()
    {
        if (_trustedFormRef is not null)
        {
            await _trustedFormRef.Finalize();
            _trustedFormFinalized = true;
            StateHasChanged();
        }
    }

    private void HandleValidSubmit()
    {
        _formSubmitted = true;
    }

    public class DemoFormModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string? Email { get; set; }
    }

}