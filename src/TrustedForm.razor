@using System.Threading
@using Microsoft.JSInterop
@using Soenneker.Blazor.Extensions.EventCallback
@using Soenneker.Extensions.Task
@using Soenneker.Extensions.ValueTask
@using Soenneker.TrustedForm.Blazor.Abstract
@using Soenneker.TrustedForm.Blazor.Options

@inject ITrustedFormInterop TrustedFormInterop

@implements ITrustedForm

<div id="@_elementId" @attributes="Attributes" ></div>

@if (Configuration.IncludeForm)
{
    <form></form> 
}

@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object?>? Attributes { get; set; }

    private DotNetObjectReference<TrustedForm>? _dotNetReference;
    private readonly CancellationTokenSource _cTs = new();
    private readonly string _elementGuid;
    private readonly string _elementId;

    private bool _initialized;
    private bool _isCreated;
    private bool _shouldRender = true;

    [Parameter]
    public EventCallback OnLoad { get; set; }

    [Parameter]
    public TrustedFormConfiguration Configuration { get; set; } = new();

    protected override bool ShouldRender() => _shouldRender;

    protected override void OnInitialized() => _dotNetReference = DotNetObjectReference.Create(this);

    public TrustedForm()
    {
        _elementGuid = Guid.NewGuid().ToString();
        _elementId = $"trustedform-{_elementGuid}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isCreated)
        {
            Configuration.Field ??= $"trustedform-field-{_elementGuid}";

            await Create(_cTs.Token).NoSync();
        }
    }

    private async ValueTask Create(CancellationToken cancellationToken)
    {
        if (_initialized)
            return;

        _initialized = true;

        await TrustedFormInterop.Init(_elementId, Configuration, _dotNetReference!, cancellationToken).NoSync();
        await TrustedFormInterop.CreateObserver(_elementId, cancellationToken).NoSync();

        _isCreated = true;
        _shouldRender = false;
    }

    public async ValueTask<string?> GetCertUrl(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("TrustedForm must be initialized before calling GetCertUrl.");

        using var cts = CancellationTokenSource.CreateLinkedTokenSource(_cTs.Token, cancellationToken);
        return await TrustedFormInterop.GetCertUrl(_elementId, cts.Token).NoSync();
    }

    public async ValueTask Stop(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("TrustedForm must be initialized before calling Stop.");

        using var cts = CancellationTokenSource.CreateLinkedTokenSource(_cTs.Token, cancellationToken);
        await TrustedFormInterop.Stop(_elementId, cts.Token).NoSync();
    }

    public async ValueTask Start(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("TrustedForm must be initialized before calling Start.");

        using var cts = CancellationTokenSource.CreateLinkedTokenSource(_cTs.Token, cancellationToken);
        await TrustedFormInterop.Start(_elementId, cts.Token).NoSync();
    }

    [JSInvokable]
    public Task OnLoadCallback()
    {
        return OnLoad.InvokeIfHasDelegate();
    }

    public async ValueTask DisposeAsync()
    {
        GC.SuppressFinalize(this);

        if (!_cTs.IsCancellationRequested)
        {
            await _cTs.CancelAsync().NoSync();
            _cTs.Dispose();
        }

        _initialized = false;
        _isCreated = false;

        _dotNetReference?.Dispose();
    }

}